models:
    Res16UNet21-15_Res16Image21_encoder_max:
        # 28.1 M params - 109.4 Mo on the GPU - ~2.7 ko/pixel at training time
        class: sparseconv3d.APIModel
        conv_type: "SPARSE"
        backend: "torchsparse"
        backbone: # backbone offset specific for Sparse conv application builder
            define_constants:
                in_feat: 32
                in_feat_img: 4
                block: ResBlock # Can be any of the blocks in modules/MinkowskiEngine/api_modules.py

            down_conv:
                module_name: ResNetDown
                block: block
                N: [ 0,0,  0,2,  0,2,  0,2,  0,2 ]
                kernel_size: [ 3,3,  2,3,  2,3,  2,3,  2,3 ]
                stride: [ 1,1,  2,1,  2,1,  2,1,  2,1 ]
                down_conv_nn:
                  [
                      [ FEAT, in_feat ],
                      [ in_feat, in_feat ],

                      [ in_feat, in_feat ],
                      [ in_feat, in_feat ],

                      [ in_feat, 2*in_feat ],
                      [ 2*in_feat, 2*in_feat ],

                      [ 2*in_feat, 4*in_feat ],
                      [ 4*in_feat, 4*in_feat ],

                      [ 4*in_feat, 8*in_feat ],
                      [ 8*in_feat, 8*in_feat ],
                  ]

                image:
                    down_conv:
                        module_name: ResNetDown
                        block: ResBlock
                        normalization: GroupNorm
                        weight_standardization: True
                        N: [ 0, 2, 2, 2, 2 ]
                        stride: [ 1, 2, 2, 2, 2 ]
                        kernel_size: [ 3, 2, 2, 2, 2 ]
                        padding: [ 1, 0, 0, 0, 0 ]
                        down_conv_nn:
                          [
                              [ in_feat_img, in_feat ],
                              [ in_feat, in_feat ],
                              [ in_feat, 2*in_feat ],
                              [ 2*in_feat, 4*in_feat ],
                              [ 4*in_feat, 8*in_feat ],
                          ]
                    atomic_pooling:
                        module_name: BimodalCSRPool
                        mode: max
                    view_pooling:
                        module_name: BimodalCSRPool
                        mode: max
                    fusion:
                        module_name: BimodalFusion
                        mode: residual
                    branching_index: [ 0, 1, 2, 3, 4 ]

            up_conv:
                block: block
                module_name: ResNetUp
                N: [ 1, 1, 1, 1, 1 ]
                kernel_size: [ 2, 2, 2, 2, 3 ]
                stride: [ 2, 2, 2, 2, 1 ]
                up_conv_nn:
                  [
                      [ 8*in_feat, 4*in_feat, 4*in_feat ],
                      [ 4*in_feat, 2*in_feat, 4*in_feat ],
                      [ 4*in_feat, in_feat, 3*in_feat ],
                      [ 3*in_feat, in_feat, 3*in_feat ],
                      [ 3*in_feat, 0, 3*in_feat ],
                  ]

    Res16UNet21-15_Res16Image21_encoder_mean:
        # 28.1 M params - 109.4 Mo on the GPU - ~2.7 ko/pixel at training time
        class: sparseconv3d.APIModel
        conv_type: "SPARSE"
        backend: "torchsparse"
        backbone: # backbone offset specific for Sparse conv application builder
            define_constants:
                in_feat: 32
                in_feat_img: 4
                block: ResBlock # Can be any of the blocks in modules/MinkowskiEngine/api_modules.py

            down_conv:
                module_name: ResNetDown
                block: block
                N: [ 0,0,  0,2,  0,2,  0,2,  0,2 ]
                kernel_size: [ 3,3,  2,3,  2,3,  2,3,  2,3 ]
                stride: [ 1,1,  2,1,  2,1,  2,1,  2,1 ]
                down_conv_nn:
                  [
                      [ FEAT, in_feat ],
                      [ in_feat, in_feat ],

                      [ in_feat, in_feat ],
                      [ in_feat, in_feat ],

                      [ in_feat, 2*in_feat ],
                      [ 2*in_feat, 2*in_feat ],

                      [ 2*in_feat, 4*in_feat ],
                      [ 4*in_feat, 4*in_feat ],

                      [ 4*in_feat, 8*in_feat ],
                      [ 8*in_feat, 8*in_feat ],
                  ]

                image:
                    down_conv:
                        module_name: ResNetDown
                        block: ResBlock
                        normalization: GroupNorm
                        weight_standardization: True
                        N: [ 0, 2, 2, 2, 2 ]
                        stride: [ 1, 2, 2, 2, 2 ]
                        kernel_size: [ 3, 2, 2, 2, 2 ]
                        padding: [ 1, 0, 0, 0, 0 ]
                        down_conv_nn:
                          [
                              [ in_feat_img, in_feat ],
                              [ in_feat, in_feat ],
                              [ in_feat, 2*in_feat ],
                              [ 2*in_feat, 4*in_feat ],
                              [ 4*in_feat, 8*in_feat ],
                          ]
                    atomic_pooling:
                        module_name: BimodalCSRPool
                        mode: max
                    view_pooling:
                        module_name: BimodalCSRPool
                        mode: mean
                    fusion:
                        module_name: BimodalFusion
                        mode: residual
                    branching_index: [ 0, 1, 2, 3, 4 ]

            up_conv:
                block: block
                module_name: ResNetUp
                N: [ 1, 1, 1, 1, 1 ]
                kernel_size: [ 2, 2, 2, 2, 3 ]
                stride: [ 2, 2, 2, 2, 1 ]
                up_conv_nn:
                  [
                      [ 8*in_feat, 4*in_feat, 4*in_feat ],
                      [ 4*in_feat, 2*in_feat, 4*in_feat ],
                      [ 4*in_feat, in_feat, 3*in_feat ],
                      [ 3*in_feat, in_feat, 3*in_feat ],
                      [ 3*in_feat, 0, 3*in_feat ],
                  ]

    Res16UNet21-15_Res16Image21_late_max:
        # 28.1 M params - 109.4 Mo on the GPU - ~2.7 ko/pixel at training time
        class: sparseconv3d.LateFeatureFusion
        conv_type: "SPARSE"
        backend: "torchsparse"

        backbone_3d: # backbone offset specific for Sparse conv application builder
            define_constants:
                in_feat: 32
                block: ResBlock
            down_conv:
                module_name: ResNetDown
                block: block
                N: [ 0, 2, 2, 2, 2 ]
                kernel_size: [ 3, 2, 2, 2, 2 ]
                stride: [ 1, 2, 2, 2, 2 ]
                down_conv_nn:
                  [
                      [ FEAT, in_feat ],
                      [ in_feat, in_feat ],
                      [ in_feat, 2*in_feat ],
                      [ 2*in_feat, 4*in_feat ],
                      [ 4*in_feat, 8*in_feat ],
                  ]
            up_conv:
                block: block
                module_name: ResNetUp
                N: [ 1, 1, 1, 1, 1 ]
                kernel_size: [ 2, 2, 2, 2, 3 ]
                stride: [ 2, 2, 2, 2, 1 ]
                up_conv_nn:
                  [
                      [ 8*in_feat, 4*in_feat, 4*in_feat ],
                      [ 4*in_feat, 2*in_feat, 4*in_feat ],
                      [ 4*in_feat, in_feat, 3*in_feat ],
                      [ 3*in_feat, in_feat, 3*in_feat ],
                      [ 3*in_feat, 0, 3*in_feat ],
                  ]

        backbone_no3d: # backbone offset specific for Sparse conv application builder
            define_constants:
                in_feat: 32
                in_feat_img: 4
                block: ResBlock # Can be any of the blocks in modules/MinkowskiEngine/api_modules.py
                strided_k: 2
                strided_s: 2
                strided_p: 0

            down_conv:
                image:
                    down_conv:
                        module_name: ResNetDown
                        block: ResBlock
                        normalization: GroupNorm
                        weight_standardization: True
                        N: [ 0, 2, 2, 2, 2 ]
                        stride: [ 1, strided_s, strided_s, strided_s, strided_s ]
                        kernel_size: [ 3, strided_k, strided_k, strided_k, strided_k ]
                        padding: [ 1, strided_p, strided_p, strided_p, strided_p ]
                        down_conv_nn:
                          [
                              [ in_feat_img, in_feat ],
                              [ in_feat, in_feat ],
                              [ in_feat, 2*in_feat ],
                              [ 2*in_feat, 4*in_feat ],
                              [ 4*in_feat, 8*in_feat ],
                          ]
                    up_conv:
                        module_name: ResNetUp
                        block: ResBlock
                        normalization: GroupNorm
                        weight_standardization: True
                        N: 1
                        kernel_size: [ strided_k, strided_k, strided_k, strided_k, 3 ]
                        stride: [ strided_s, strided_s, strided_s, strided_s, 1 ]
                        padding: [ strided_p, strided_p, strided_p, strided_p, 1 ]
                        up_conv_nn:
                          [
                              [ 8*in_feat, 4*in_feat, 4*in_feat ],
                              [ 4*in_feat, 2*in_feat, 4*in_feat ],
                              [ 4*in_feat, in_feat, 3*in_feat ],
                              [ 3*in_feat, in_feat, 3*in_feat ],
                              [ 3*in_feat, 0, 3*in_feat ],
                          ]
                    atomic_pooling:
                        module_name: BimodalCSRPool
                        mode: max
                    view_pooling:
                        module_name: BimodalCSRPool
                        mode: max
                    fusion:
                        module_name: BimodalFusion
                        mode: residual
                    branching_index: 0

    Res16UNet21-15_Res16Image21_late_mean:
        # 28.1 M params - 109.4 Mo on the GPU - ~2.7 ko/pixel at training time
        class: sparseconv3d.LateLogitFusion
        conv_type: "SPARSE"
        backend: "torchsparse"

        backbone_3d: # backbone offset specific for Sparse conv application builder
            define_constants:
                in_feat: 32
                block: ResBlock
            down_conv:
                module_name: ResNetDown
                block: block
                N: [ 0, 2, 2, 2, 2 ]
                kernel_size: [ 3, 2, 2, 2, 2 ]
                stride: [ 1, 2, 2, 2, 2 ]
                down_conv_nn:
                  [
                      [ FEAT, in_feat ],
                      [ in_feat, in_feat ],
                      [ in_feat, 2*in_feat ],
                      [ 2*in_feat, 4*in_feat ],
                      [ 4*in_feat, 8*in_feat ],
                  ]
            up_conv:
                block: block
                module_name: ResNetUp
                N: [ 1, 1, 1, 1, 1 ]
                kernel_size: [ 2, 2, 2, 2, 3 ]
                stride: [ 2, 2, 2, 2, 1 ]
                up_conv_nn:
                  [
                      [ 8*in_feat, 4*in_feat, 4*in_feat ],
                      [ 4*in_feat, 2*in_feat, 4*in_feat ],
                      [ 4*in_feat, in_feat, 3*in_feat ],
                      [ 3*in_feat, in_feat, 3*in_feat ],
                      [ 3*in_feat, 0, 3*in_feat ],
                  ]

        backbone_no3d: # backbone offset specific for Sparse conv application builder
            define_constants:
                in_feat: 32
                in_feat_img: 4
                block: ResBlock # Can be any of the blocks in modules/MinkowskiEngine/api_modules.py
                strided_k: 2
                strided_s: 2
                strided_p: 0

            down_conv:
                image:
                    down_conv:
                        module_name: ResNetDown
                        block: ResBlock
                        normalization: GroupNorm
                        weight_standardization: True
                        N: [ 0, 2, 2, 2, 2 ]
                        stride: [ 1, strided_s, strided_s, strided_s, strided_s ]
                        kernel_size: [ 3, strided_k, strided_k, strided_k, strided_k ]
                        padding: [ 1, strided_p, strided_p, strided_p, strided_p ]
                        down_conv_nn:
                          [
                              [ in_feat_img, in_feat ],
                              [ in_feat, in_feat ],
                              [ in_feat, 2*in_feat ],
                              [ 2*in_feat, 4*in_feat ],
                              [ 4*in_feat, 8*in_feat ],
                          ]
                    up_conv:
                        module_name: ResNetUp
                        block: ResBlock
                        normalization: GroupNorm
                        weight_standardization: True
                        N: 1
                        kernel_size: [ strided_k, strided_k, strided_k, strided_k, 3 ]
                        stride: [ strided_s, strided_s, strided_s, strided_s, 1 ]
                        padding: [ strided_p, strided_p, strided_p, strided_p, 1 ]
                        up_conv_nn:
                          [
                              [ 8*in_feat, 4*in_feat, 4*in_feat ],
                              [ 4*in_feat, 2*in_feat, 4*in_feat ],
                              [ 4*in_feat, in_feat, 3*in_feat ],
                              [ 3*in_feat, in_feat, 3*in_feat ],
                              [ 3*in_feat, 0, 3*in_feat ],
                          ]
                    last_conv:
                        input_nc: 3*in_feat
                        output_nc: N_CLS
                    atomic_pooling:
                        module_name: BimodalCSRPool
                        mode: max
                    view_pooling:
                        module_name: BimodalCSRPool
                        mode: mean
                    fusion:
                        module_name: BimodalFusion
                        mode: residual
                    branching_index: 0
