# @package data
defaults:
    - /data/segmentation/multimodal/kitti360-sparse

# These parameters are intended to be specified in dedicated configs
resolution_2d: [1408, 376]      # Image resolution
padding_2d: 8          # Padding for CropImageGroups
min_size_2d: 64         # Minimum size for CropImageGroups
exact_splatting_2d: True  # Whether only exact mappings are preserved after splatting
proj_upscale: 2
r_max: 8
r_min: 0.05
train_pixel_credit: 4  # Choose based on GPU capacity, model ko/pixel cost and 3D batch_size
test_pixel_credit: 4
k_coverage: 2

multimodal:  # Each modality must be inserted in a dedicated 'multimodal' section

    modality: image

    pre_transform:
        - transform: LoadImages  # Read images from disk
          params:
                ref_size: ${data.resolution_2d}
                show_progress: True
        - transform: NonStaticMask  # Compute acquisition mask
          params:
                ref_size: ${data.resolution_2d}
                proj_upscale: ${data.proj_upscale}
                n_sample: 5
        - transform: MapImages  # Compute the 3D-2D mapping
          params:
                method: SplattingVisibility
                ref_size: ${data.resolution_2d}
                proj_upscale: ${data.proj_upscale}
                use_cuda: True
                voxel: ${data.voxel}
                r_max: ${data.r_max}
                r_min: ${data.r_min}
                exact: ${data.exact_splatting_2d}
                verbose: True  # True to print computation times
        - transform: NeighborhoodBasedMappingFeatures  # Compute local density and occlusion
          params:
                k: 50  # empirically-chosen heuristic [30-100] is fine
                voxel: ${data.voxel}
                density: True
                occlusion: True
                use_faiss: True
                verbose: True  # True to print computation times

    train_transforms:
        - transform: SelectMappingFromPointId  # Select mappings after 3D points sampling
        - transform: CenterRoll  # Roll images to center mappings
        - transform: PickImagesFromMappingArea  # Remove images with not enough mappings
          params:
                use_bbox: ${data.exact_splatting_2d}
        - transform: CropImageGroups  # Compute cropping groups to minimize embedding cost
          params:
                padding: ${data.padding_2d}
                min_size: ${data.min_size_2d}
        - transform: PickImagesFromMemoryCredit  # Pick images based on memory credit
          params:
                img_size: ${data.resolution_2d}
                n_img: ${data.train_pixel_credit}
                k_coverage: ${data.k_coverage}
        - transform: JitterMappingFeatures  # Mapping features augmentation
          params:
                sigma: 0.02
                clip: 0.03
        - transform: ColorJitter  # Radiometric augmentation
          params:
                  brightness: 0.6
                  contrast: 0.6
                  saturation: 0.7
        - transform: RandomHorizontalFlip
        - transform: ToFloatImage  # Convert uint8 image to float
        - transform: Normalize  # Normalize colors

    test_transforms:
        - transform: SelectMappingFromPointId  # Select mappings after 3D points sampling
        - transform: CenterRoll  # Roll images to center mappings
        - transform: PickImagesFromMappingArea  # Remove images with not enough mappings
          params:
                use_bbox: ${data.exact_splatting_2d}
        - transform: AddPixelHeightFeature  # Pixel height as image channel
        - transform: CropImageGroups  # Compute cropping groups to minimize embedding cost
          params:
                padding: ${data.padding_2d}
                min_size: ${data.min_size_2d}
        - transform: PickImagesFromMemoryCredit  # Pick images based on memory credit
          params:
                img_size: ${data.resolution_2d}
                n_img: ${data.test_pixel_credit}
                k_coverage: ${data.k_coverage}
        - transform: ToFloatImage  # Convert uint8 image to float
        - transform: Normalize  # Normalize colors

    val_transforms: ${data.multimodal.test_transforms}
